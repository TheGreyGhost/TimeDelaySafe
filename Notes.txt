
Max input impedance:
https://picaxeforum.co.uk/threads/20k-input-impedance.16702/

ReadADC timing:

https://picaxeforum.co.uk/threads/how-long-does-readadc-command-take.17928/

Low power:
Low-power features

This project uses several techniques suggested in previous posts to reduce power while running on batteries.

#not used# 1. Run at slower speed. Poke the OSCCON register ("poke $8f,%00000000") to run at 31.250kHz instead of 4mHz (1/128th the speed). See "08M UNDER clocking"-- http://www.picaxeforum.co.uk/showthread.php?t=2233 ; also http://www.kranenborg.org/ee/picaxe/ (search for low-power) also search the forum for "OSCCON".

2. Run DISABLEBOD. This turns off the picaxe brown-out detection, which cause the picaxe to shut itself off at a bit below 3V. With DISABLEBOD, picaxes have been kept alive down to 1.3V. See manuka, et. al.: http://www.picaxeforum.co.uk/showthread.php?t=6513 ; also Mycroft2152, "Low Power PICAXE 08M - BOD" -- http://www.picaxeforum.co.uk/showthread.php?t=4826

3. If you are using occasional ADCs while on battery, turn off the ADC module between reads by poking the ADCON0 register ("poke $1f,value"). Bit0 of value turns it off, but the register should be read first so that other bits are preserved. See Dippy "So for low-power people (doing the occasional A/D) it looks like a quick poke might be in order to switch off ADC module" http://www.picaxeforum.co.uk/showthread.php?t=5950 ; also http://www.picaxeforum.co.uk/showthread.php?t=8346

4. Pull down all unused inputs to 0V, e.g. with 100K or even 1M resistors. See "problem with getting very low power consumption" http://www.picaxeforum.co.uk/showthread.php?t=2292
Kranenborg: After I had tied all 18X inputs low current consumption dropped from a very unstable 250 uA to a very stable 30uA at 5V and 31kHz (equiv. current consumption at 4MHz is approx 1.5 mA = 1500uA thus meaning a reduction to only 2% of the original consumption).
5. Current-limit any outputs to the degree possible. For example, at 4.5V, an LED with a 330 ohm resister uses about 13 milliamps. With a 22K2 resister it is much dimmer, but readable, and uses only .2 milliamps. Blink patterns can further reduce current usage while expanding the information provided.

For any register poking, confirm on the Microchip datasheets that you are poking the correct register for that chip.
----------
NAP command.
----------
Low power sample:
Code:
' 08BakUp2 test battery backup and then battery life

#picaxe 08m
' pin0=AVAILABLE
' pin1=Green LED+22K (battery voltage ok--on while mains on, blinks when off)
' pin2=AVAILABLE
' pin3=sensor for mains--in series 10K, 1n914, 1n914 
' pin4=ADC sensing battery low w. 4K7 (while mains on)
'
' Peek, Poke memory $50-$7f 
'
' LEDs mark 4 states:
' 1  Regulated power, battery off:        Both LEDs off
' 2  Regulated power on, battery>3Volts:  Both LEDs on
' 3  Regulated power on, battery<3Volts:  Red LED on, Green off
' 4  Regulated power off, battery on:     Red LED off, Green blinks
'
' Registers used: b0 (bit0 only), b1 (scratch), b13

symbol mainsOn = bit0
symbol scratch = b1   ' reusable elsewhere for scratch
symbol loopCnt = b13  ' we have a 200ms pause each loop, so 25=5 sec
symbol mainsSensor = pin3
symbol ADCON0 = $1f   ' ADC control SFR register to turn off ADC module
symbol OSCCON = $8f   ' Oscillator control SFR register for speed up/down
symbol ADCtime = $7f  ' counts # of 50 second loops; at 72 (1hr), ADC battery
symbol Red_LED = 0
symbol Green_LED = 1

dirs = %00000011
disableBOD                ' turn off Brown Out Detection for low power
                          ' and because we're doing our own battery monitoring
pause 5000
poke ADCtime,0            ' initialize counter
if mainsSensor = 1 then   ' if we have mains power
  readadc 4,scratch       ' check battery voltage: 3V should be ok
  if scratch > 153 then   ' 255/5v*3v = 153
    high Green_LED
  endif
else                       ' we're starting up on battery
  mainsOn = 1              ' pretend we're coming from a mains-on state
endif
'sertxd("  Restarted ",#scratch,CR,LF)

main:
  do
    if mainsOn = 1 then
      pause 200            ' allow a little debounce time & a little loop time
                           '  Note: instead of pause, "nap" will save
                           '    power, but pwm and servo commands cease
                           '  at 4mHz we will have about 5 loops per second
    else 
'      pause 1              ' we're running at 1/128th the speed on battery
                            ' timings will be based on slow instruction speed
    endif
    if mainsSensor = 1 then ' mains power is on
      if mainsOn = 0 then  ' power is just coming on
        poke OSCCON,%01100000 ' = 4 MHz; speed back up
'        high Red_LED        ' indicate that we have mains power
        mainsOn = 1
      endif
    else                   ' we're running on battery
      if mainsOn = 1 then  ' power just went off
        scratch = b0            ' save bit settings
        peek ADCON0, b0
        bit0 = 0           ' turn off the ADC module to save power
        poke ADCON0, b0
        b0 = scratch
        mainsOn = 0
        low Green_LED      ' can't monitor battery with mains off
        poke OSCCON,%00000000 ' = 31 kHz slow down
      endif
'      low Red_LED          ' turn off mains indicator or turn off blink
    endif
    inc loopCnt
    scratch = loopCnt // 10  ' 10 loops @ 31kHz = 5-7 seconds (experimentally)
    if mainsOn = 0 then    ' we're on battery--give a 128ms flash every 5 sec
      if scratch = 0 then  ' about 5-7 seconds passed (on battery)
        high Green_LED       ' flash led
        pause 1              ' 1*128 = 128ms
        low Green_LED
      endif
    else                   ' we're on mains
'  sertxd("  ",#loopCnt)
      if loopCnt = 250 then   ' about 50+ seconds passed (on mains)
        peek ADCtime,scratch
        inc scratch
        poke ADCtime,scratch
        if b1 = 72 then    ' 250 loops = 50secs * 72 = 1 hour
          readadc 4,scratch       ' check battery voltage 3V should be ok
'  sertxd("  ",#scratch,CR,LF)
          if scratch > 153 then   ' 255/5v*3v = 153
            high Green_LED
          else
            low Green_LED  ' battery needs to be replaced
          endif
          poke ADCtime,0   ' restart 1-hour clock
        endif
        loopCnt = 0
      endif
    endif
  loop
